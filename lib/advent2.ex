defmodule Advent2 do
  @data [
    1,
    0,
    0,
    3,
    1,
    1,
    2,
    3,
    1,
    3,
    4,
    3,
    1,
    5,
    0,
    3,
    2,
    6,
    1,
    19,
    1,
    5,
    19,
    23,
    2,
    6,
    23,
    27,
    1,
    27,
    5,
    31,
    2,
    9,
    31,
    35,
    1,
    5,
    35,
    39,
    2,
    6,
    39,
    43,
    2,
    6,
    43,
    47,
    1,
    5,
    47,
    51,
    2,
    9,
    51,
    55,
    1,
    5,
    55,
    59,
    1,
    10,
    59,
    63,
    1,
    63,
    6,
    67,
    1,
    9,
    67,
    71,
    1,
    71,
    6,
    75,
    1,
    75,
    13,
    79,
    2,
    79,
    13,
    83,
    2,
    9,
    83,
    87,
    1,
    87,
    5,
    91,
    1,
    9,
    91,
    95,
    2,
    10,
    95,
    99,
    1,
    5,
    99,
    103,
    1,
    103,
    9,
    107,
    1,
    13,
    107,
    111,
    2,
    111,
    10,
    115,
    1,
    115,
    5,
    119,
    2,
    13,
    119,
    123,
    1,
    9,
    123,
    127,
    1,
    5,
    127,
    131,
    2,
    131,
    6,
    135,
    1,
    135,
    5,
    139,
    1,
    139,
    6,
    143,
    1,
    143,
    6,
    147,
    1,
    2,
    147,
    151,
    1,
    151,
    5,
    0,
    99,
    2,
    14,
    0,
    0
  ]

  def find_noun_verb(input \\ @data, expected) do
    pairs = for x <- 0..99, y <- 0..99, do: {x, y}
    do_find_noun_verb(input, expected, pairs)
  end

  def do_find_noun_verb(input, expected, [{x, y} | rest_pairs]) do
    input = input |> List.update_at(1, fn _ -> x end) |> List.update_at(2, fn _ -> y end)

    case do_run(input, input) do
      [^expected | _] -> {x, y, x * 100 + y}
      _ -> do_find_noun_verb(input, expected, rest_pairs)
    end
  end

  def run(input \\ @data) do
    input = input |> List.update_at(1, fn _ -> 12 end) |> List.update_at(2, fn _ -> 2 end)
    do_run(input, input)
  end

  def do_run([1, a, b, c | rest], state) do
    state = List.update_at(state, c, fn _ -> Enum.at(state, a) + Enum.at(state, b) end)
    do_run(rest, state)
  end

  def do_run([2, a, b, c | rest], state) do
    state = List.update_at(state, c, fn _ -> Enum.at(state, a) * Enum.at(state, b) end)
    do_run(rest, state)
  end

  def do_run([99 | _], state) do
    state
  end
end
